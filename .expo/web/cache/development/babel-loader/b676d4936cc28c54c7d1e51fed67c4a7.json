{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"key\", \"routeNames\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useChildListeners from \"./useChildListeners\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useSyncState from \"./useSyncState\";\nimport checkSerializable from \"./checkSerializable\";\nvar NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\nvar serializableWarnings = [];\n\ntry {\n  Object.defineProperty(global, 'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED', {\n    set: function set(_) {\n      console.warn(\"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\");\n    }\n  });\n} catch (e) {}\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, _excluded);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = useChildListeners(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = function dispatch(action) {\n    if (listeners.focus[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(action);\n    });\n  };\n\n  var canGoBack = function canGoBack() {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners.focus[0](function (navigation) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n        target: target\n      }));\n    });\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state === undefined) {\n      return undefined;\n    }\n\n    while (state.routes[state.index].state !== undefined) {\n      state = state.routes[state.index].state;\n    }\n\n    return state.routes[state.index];\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  React.useImperativeHandle(ref, function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      resetRoot: resetRoot,\n      dispatch: dispatch,\n      canGoBack: canGoBack,\n      getRootState: getRootState,\n      getState: function getState() {\n        return state;\n      },\n      getParent: function getParent() {\n        return undefined;\n      },\n      dangerouslyGetState: function dangerouslyGetState() {\n        return state;\n      },\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return undefined;\n      },\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions\n    });\n  });\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n  });\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined) {\n        var result = checkSerializable(state);\n\n        if (!result.serializable) {\n          var location = result.location,\n              reason = result.reason;\n          var path = '';\n          var pointer = state;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \".concat(curr);\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\".concat(curr, \"]\");\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\".concat(curr);\n              } else {\n                path += \"[\".concat(JSON.stringify(curr), \"]\");\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\".concat(path, \" (\").concat(reason, \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\".concat(action.type, \"'\").concat(payload ? \" with payload \".concat(JSON.stringify(action.payload)) : '', \" was not handled by any navigator.\");\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\".concat(payload.name, \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\");\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children)))));\n\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"mappings":"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","names":["React","CommonActions","EnsureSingleNavigator","UnhandledActionContext","NavigationBuilderContext","NavigationStateContext","NavigationRouteContext","NavigationContext","ScheduleUpdateContext","useChildListeners","useKeyedChildListeners","useOptionsGetters","useEventEmitter","useSyncState","checkSerializable","NOT_INITIALIZED_ERROR","serializableWarnings","Object","defineProperty","global","set","_","console","warn","e","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","index","emitter","addOptionsGetter","getCurrentOptions","useImperativeHandle","keys","reduce","acc","name","create","getParent","dangerouslyGetState","dangerouslyGetParent","onDispatchAction","noop","emit","type","data","lastEmittedOptionsRef","onOptionsChange","options","builderContext","useMemo","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","process","env","NODE_ENV","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","defaultOnUnhandledAction","payload","error","element","Provider","value"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationContext from './NavigationContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useChildListeners from './useChildListeners';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport checkSerializable from './checkSerializable';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerProps,\n} from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nconst serializableWarnings: string[] = [];\n\ntry {\n  /**\n   * Migration instructions for removal of devtools from core\n   */\n  Object.defineProperty(\n    global,\n    'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED',\n    {\n      set(_) {\n        console.warn(\n          \"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\"\n        );\n      },\n    }\n  );\n} catch (e) {\n  // Ignore\n}\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [\n      state,\n      getState,\n      setState,\n      scheduleUpdate,\n      flushUpdates,\n    ] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners.focus[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners.focus[0]((navigation) => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          throw new Error(NOT_INITIALIZED_ERROR);\n        }\n\n        listeners.focus[0]((navigation) =>\n          navigation.dispatch({\n            ...CommonActions.reset(state),\n            target,\n          })\n        );\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      let state = getRootState();\n      if (state === undefined) {\n        return undefined;\n      }\n      while (state.routes[state.index].state !== undefined) {\n        state = state.routes[state.index].state as NavigationState;\n      }\n      return state.routes[state.index];\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-expect-error: we can't know the type statically\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n      getState: () => state,\n      getParent: () => undefined,\n      dangerouslyGetState: () => state,\n      dangerouslyGetParent: () => undefined,\n      getCurrentRoute,\n      getCurrentOptions,\n    }));\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({ type: '__unsafe_action__', data: { action, noop } });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n    });\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (state !== undefined) {\n          const result = checkSerializable(state);\n\n          if (!result.serializable) {\n            const { location, reason } = result;\n\n            let path = '';\n            let pointer: Record<any, any> = state;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <ScheduleUpdateContext.Provider value={scheduleContext}>\n        <NavigationBuilderContext.Provider value={builderContext}>\n          <NavigationStateContext.Provider value={context}>\n            <UnhandledActionContext.Provider\n              value={onUnhandledAction ?? defaultOnUnhandledAction}\n            >\n              <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n            </UnhandledActionContext.Provider>\n          </NavigationStateContext.Provider>\n        </NavigationBuilderContext.Provider>\n      </ScheduleUpdateContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}
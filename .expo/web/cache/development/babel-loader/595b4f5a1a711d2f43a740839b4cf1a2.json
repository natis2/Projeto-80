{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState as getActionFromStateDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from \"./ServerContext\";\n\nvar createMemoryHistory = function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n\n        return _index > -1 ? _index : 0;\n      }\n\n      return 0;\n    },\n\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n          state = _ref2.state;\n      interrupt();\n      var id = nanoid();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var path = _ref3.path,\n          state = _ref3.state;\n\n      var _window$history$state2, _window$history$state3;\n\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (items.length) {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      } else {\n        items.push({\n          path: path,\n          state: state,\n          id: id\n        });\n      }\n\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n\n      if (n > 0) {\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        var onPopState = function onPopState() {\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n};\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n\n  var callback = function _callee() {\n    var last;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(cb());\n\n          case 7:\n            _context.prev = 7;\n            handling = false;\n\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n\n            return _context.finish(7);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n\n  return callback;\n};\n\nvar isUsingLinking = false;\nexport default function useLinking(ref, _ref4) {\n  var _ref4$enabled = _ref4.enabled,\n      enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n      config = _ref4.config,\n      _ref4$getStateFromPat = _ref4.getStateFromPath,\n      getStateFromPath = _ref4$getStateFromPat === void 0 ? getStateFromPathDefault : _ref4$getStateFromPat,\n      _ref4$getPathFromStat = _ref4.getPathFromState,\n      getPathFromState = _ref4$getPathFromStat === void 0 ? getPathFromStateDefault : _ref4$getPathFromStat,\n      _ref4$getActionFromSt = _ref4.getActionFromState,\n      getActionFromState = _ref4$getActionFromSt === void 0 ? getActionFromStateDefault : _ref4$getActionFromSt;\n  React.useEffect(function () {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return function () {\n      isUsingLinking = false;\n    };\n  });\n\n  var _React$useState = React.useState(createMemoryHistory),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n\n      var path = _location ? _location.pathname + _location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n\n      var navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\".concat(path, \"': \").concat(e.message));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      var state = ref.current.getRootState();\n\n      if (state) {\n        var path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n\n    var onStateChange = function _callee2() {\n      var navigation, previousState, state, pendingPath, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n              pendingPath = pendingPopStatePathRef.current;\n              path = getPathFromStateRef.current(state, configRef.current);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = _slicedToArray(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n\n              if (!(previousFocusedState && focusedState && path !== pendingPath)) {\n                _context2.next = 37;\n                break;\n              }\n\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n              if (!(historyDelta > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 35;\n              break;\n\n            case 16:\n              if (!(historyDelta < 0)) {\n                _context2.next = 34;\n                break;\n              }\n\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 19;\n\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 25;\n                break;\n              }\n\n              _context2.next = 23;\n              return _regeneratorRuntime.awrap(history.go(nextIndex - currentIndex));\n\n            case 23:\n              _context2.next = 27;\n              break;\n\n            case 25:\n              _context2.next = 27;\n              return _regeneratorRuntime.awrap(history.go(historyDelta));\n\n            case 27:\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 32;\n              break;\n\n            case 30:\n              _context2.prev = 30;\n              _context2.t0 = _context2[\"catch\"](19);\n\n            case 32:\n              _context2.next = 35;\n              break;\n\n            case 34:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 35:\n              _context2.next = 38;\n              break;\n\n            case 37:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[19, 30]], Promise);\n    };\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["React","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","nanoid","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","isUsingLinking","useLinking","enabled","config","useEffect","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getActionFromStateRef","getPathFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","console","warn","action","dispatch","e","message","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","_ref$current","addListener"],"sources":["useLinking.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  getActionFromState as getActionFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
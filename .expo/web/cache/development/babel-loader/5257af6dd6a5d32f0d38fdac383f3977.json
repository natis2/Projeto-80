{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: routeOptions\n    }) : defaultScreenOptions), routeOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useRouteCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","useState","options","setOptions","useContext","onDispatchAction","onOptionsChange","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","mergedOptions","clearOptions","o","_","rest","render","Provider","value","routeState"],"sources":["useDescriptors.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}
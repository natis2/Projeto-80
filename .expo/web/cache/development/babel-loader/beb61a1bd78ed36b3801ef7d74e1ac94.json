{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"openByDefault\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nexport default function DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","_state$history","some","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath, getActionFromState, NavigationContext } from '@react-navigation/core';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (path) {\n    if (!path.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\".concat(path, \").\"));\n    }\n\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(path, options.config) : getStateFromPath(path, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var root = navigation;\n      var current;\n\n      while (current = root.getParent()) {\n        root = current;\n      }\n\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        root.dispatch(action);\n      } else {\n        root.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,wBAJP;AAKA,OAAOC,cAAP;AAEA,eAAe,SAASC,SAAT,GAAqB;EAClC,IAAMC,UAAU,GAAGN,KAAK,CAACO,UAANP,CAAiBG,iBAAjBH,CAAnB;EACA,IAAMQ,OAAO,GAAGR,KAAK,CAACO,UAANP,CAAiBI,cAAjBJ,CAAhB;EAEA,IAAMS,MAAM,GAAGT,KAAK,CAACU,WAANV,CACZW,cAAD,EAAkB;IAChB,IAAI,CAACA,IAAI,CAACC,UAALD,CAAgB,GAAhBA,CAAL,EAA2B;MACzB,MAAM,IAAIE,KAAJ,yCAA2CF,IAA3C,QAAN;IACD;;IAED,IAAIL,UAAU,KAAKQ,SAAnB,EAA8B;MAC5B,MAAM,IAAID,KAAJ,CACJ,sFADI,CAAN;IAGD;;IAED,IAAQE,OAAR,GAAoBP,OAApB,CAAQO,OAAR;IAEA,IAAMC,KAAK,GAAGD,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEd,gBAATc,GACVA,OAAO,CAACd,gBAARc,CAAyBJ,IAAzBI,EAA+BA,OAAO,CAACE,MAAvCF,CADUA,GAEVd,gBAAgB,CAACU,IAAD,EAAOI,OAAP,SAAOA,WAAP,WAAOA,GAAP,MAAOA,UAAO,CAAEE,MAAhB,CAFpB;;IAIA,IAAID,KAAJ,EAAW;MACT,IAAIE,IAAI,GAAGZ,UAAX;MACA,IAAIa,OAAJ;;MAGA,OAAQA,OAAO,GAAGD,IAAI,CAACE,SAALF,EAAlB,EAAqC;QACnCA,IAAI,GAAGC,OAAPD;MACD;;MAED,IAAMG,MAAM,GAAGnB,kBAAkB,CAACc,KAAD,EAAQD,OAAR,SAAQA,WAAR,WAAQA,GAAR,MAAQA,UAAO,CAAEE,MAAjB,CAAjC;;MAEA,IAAII,MAAM,KAAKP,SAAf,EAA0B;QACxBI,IAAI,CAACI,QAALJ,CAAcG,MAAdH;MADF,OAEO;QACLA,IAAI,CAACK,KAALL,CAAWF,KAAXE;MACD;IAfH,OAgBO;MACL,MAAM,IAAIL,KAAJ,CAAU,iDAAV,CAAN;IACD;EApCU,GAsCb,CAACL,OAAD,EAAUF,UAAV,CAtCaN,CAAf;EAyCA,OAAOS,MAAP;AACD","names":["React","getStateFromPath","getActionFromState","NavigationContext","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","path","startsWith","Error","undefined","options","state","config","root","current","getParent","action","dispatch","reset"],"sources":["useLinkTo.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.getParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}